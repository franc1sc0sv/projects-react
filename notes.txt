From meta
Porque react?
Que tiene react por detras?
Como hemos llegado aca?

**Interfaces de usuario** - independientemente de donde sea
Paginas web, aplicaciones moviles, terminal
Agnostico de la plataforma
Divido en diferentes paqutes
React doom - only Navegador

    Declarativo
    Componentes

Construir tu UI con piezas de lego
Biblioteca universal - Se puede ejecutar tanto en el cliente como en el server

React lo soluciona - (evitar xss)

React tiene una API estable

Codigo Inperativo - le estamos diciendo al codigo que hacer, describiendo como hacer las cosas, una serie de instucciones
El codigo inperativo no escala bien
//Codigo inperativo
const buttons = document.querySelectorAll('button')

buttons.forEach(button => {
  button.addEventListener('click', (ev) => {
    const id = ev.target.getAttribute('data-id')
    if (ev.target.classList.contains('liked')) {
      ev.target.classList.remove('liked')
      ev.target.innerText = 'Me gusta'
    } else {
      ev.target.classList.add('liked')
      ev.target.innerText = 'Quitar me gusta'
    }
  })
})


//
Injectar componentes desde la pagina web
React es una biblioteca y la podemos usar puramente con js - Se puede usar sin instalar nada
En react vamos a crear un arbol de elementos este arbbol va ir crendo nuestra ui en base de componentes
Pero tenemos que partir desde una raiz


En react no podemos renderizar html de esta manera
root.render("<button>Hola</button>")
Porque lo que va injectar es literalmente "<button>Hola</button>" y esto lo hace para que no puedan injectar codigo


Necesitamos crear los elemntos

React solo renderiza un elemento a la vez
Lo podemos solucionar envolviendolo


DEJAR EL HTML MAS SIMPLE

JSX god

SWC - BABEL

TRANSIALCION DE JSX

Normal
Forma larga verbosa
const button = React.createElement("Button", {"data-id":123}, "Me gusta")
var button = React.createElement("Button", {
    "data-id": 123
}, "Me gusta");

JSX
const buttonJSX = <button data-id="123">Me gusta</button> 
var buttonJSX = React.createElement("button", {
    "data-id": "123"
}, "Me gusta");

Transpilador de codigo 


JSX NO ES HTML es JS
Lo estamos escribiendo como jsx porque lo podemos usar de una forma mas declarativa

en jsx podemos usar {} para escribir algo que retorna un valor por ejemplo variables, funciones

Para escribir propiedades en jsx como es js seria con camelCase tab-index = tabIndex

EMPAQUETADOR de aplicaciones web
Vite - va mas rapido, es compatible con vue,svelte,etc
Create React App - usa webpack (forma oficial, lenta, no va bien)

JS + SWC(transpilador de codigo)

Componentes tienen que ser PascalCase
    PascalCase 
    camelCase
    snake_case
    kebab-case


Para reutilizar los componentes en react los tenemos que parametrizar





IMPORTANTE EN React

Diferencia entre componente y elemento 

Un componente es una factoria de elementos - Una funcion que al ejecutarla te devuelve un elemento
El elemento es lo que renderiza react

Los componentes crean elementos y los elemntos son los que renderizan react

ESTADOS EN REACT



Renderizado condicional


Desestructuracion de JS

Estado interno


imperativo: estrucciones presisas de que quieres hacer
declaratico: de una 


react-reaccionar

VIRTUAL DOOM
React lo que hace cuando renderiza nuevos elementos es que de una forma quirurgica cambia solo lo que necesita ser cambiadp
Lo unico que ha cambiado y tengo que volver a renderizar es esto . . .

Como hace esto?
React le hace una "foto" a todo lo que renderiza 
Lo recupera y crea un arbol de elementos y dice cual es la diferencia entre lo que he renderizado antes y lo que quiero renderizar ahora
Y va realizar los cambios minimos

Cuando cambia el estado interno renderiza los componente 

Renderiza cuando hay cambios a un componente padre por ende afecta a los hijos


Cuando se VUELVA RENDERIZAR un elemnto padre sin importar si las props cambian todos los hijos se va a volver a renderiza

Diferencia que hay que tener en cuenta

A pesar que cada que se renderiza un elemento padre se vuelve a renderizar los hijos solo van a alterar al doom virtual
los que poseen cambios reales - react compara los elemntos y deja intanto al que no sufrio cambios y no toca el doom


Inicializar una estado con una prop


Si utilizamos una prop para inicializar un estado solo se incializa una vez es decir si tenemos un estado en le padre
y ese estado lo queremos como prop para renderizar un compoenente solo lo hara una vez aunque el interno siga funcionando



La actualizacion de estados en react es asincrono 


Los if siempre tienen que estar dentro del cuerpo del compoenmente nunca dentro de alguna estructura porque si no react peta -midu


Como inicializo un estado comprobando si existe la variable en local storage 
  Lo que se tiene que hacer es que le tenemos que pasar como argumento al estado para inicalizarce una funcion para realizar las comprobaciones para ver si existe esa valor en localstorage


Leer de localStorage es muy lento es por eso que si lo dejamos afuera va ser la lectura las veces que renderizemos el compoennete y eso lo va ser lento en cambio si lo ponemos dentro de la funcion solo se va ejecutar al inicialisar el estado


useEffect(funcion a ejecutar, lista de dependecias(array(opcional)))
Se ejecuta cada que ves que se renderiza el componente - Si no tiene dependecias

Si le pasamos un array vacio solo se va ejecutar una ves en su vida


La lista de depencias cada ves que hayan cambios en estas se va a volver a ejecutar el useEffect


En react siempre vamos a querer ejecutar un efecto


STANDARD



getEventListener(window) podemos ver las subscricones activas

React.Strict.Mode - Componente defecto - advertencias de codigo antiguo, incorrecto 
  -Al montare el compoenente - ejecuta el efecto, ejecuta el cleanup y ejecuta el efecto
  -Lo hace para ver si esta funcionando
  -Solo sucede en modo desarrollo - para debbugerar bien
  -En produccion no pasa ignora el Strict.Mode


  REACT DEVELOPER TOOLS
    -Icono rojo nos dice que estamos en modo desarrollo
    -Profiler - temas de rendimiento 


Manejar minimamente dos estados y que uno depende del otro

Si tuviera tiempo de hacer algo mas que haria?
Un test en twean 

Para saber react - tienes que saber inicialisar uno es decir no usar vite, create react app, etc <- Aveces no dejan usar eso en entrevistas

LO IMPORTANTE ES SABER COMO HACER EL PUNTO DE ENTRADA



  npm create vite@latest
  Vanilla
  JS
  npm install
  npm run dev
  
  Dependencias
  npm install @vitejs/plugin-react -E
  npm install react react-doom -E



  CUSTOM HOOK <- Reutilizar la logica de los compoenetes en diferentes componentes

  Evitar pasar el setState hacia afuera

  npm init playwright@latest <- testing basico

  El test mas basico ver si algo le sabe al usuario si observar algo



  MOCKS de datos
  El indice de el array esta malo usarlo como key al mapear un arreglo
  Usar el contrato de la api dentro del componente
  El componente esta atado a como funciona la API
  Mappear desde un punto el contrato de la Api y no utilizar este contrado muy profundo en los componentes

  Formas de manejar formularios en REACT
    Controladas:
    
    React va a controlar lo que escribimos por medio de un estado
    Cada que cambie le valor del input se actualice el estado
    Hace que sea mucho mas lento
    Cada que actualiza en input se renderiza el componente
    Simplifica la validacion de formularios

    No controladas
      Es la mas optima y mas rapida
    /// Vanilla
    // const fields = new FormData(e.target)
    // const query = fields.get('query')
    // console.log(query)

    // Vanilla pro
    // const { query } = Object.fromEntries(new FormData(e.target))
    // console.log(query)

    /// Using hooks
    // const inputElement = inputRef.current
    // const value = inputElement.value
    // console.log(value)

UseRef = Referencia mutable durante todo el ciclo de vida del componente cada ves que cambia se vuelve a rendizar un componente
  // const counter = useRef(0) // <-- El VALOR PERSISTE ENTTRE RENDERIZADOS
  // counter.current++


  TRUCAZO DEL INPUT REF <-- SE PUEDE USAR PARA VERIFICAR SI ES LA PRIMERA VES DE ALGO

  Datazo  <-- genralmente si una logita tiene un useEffect es un custom hook


  EL BESTO GRID
  display: grid
  with: 100%
  grid-template-columns:repeat(auto-fit, minmax(200px, 1fr))


  useMemo - memoizar un valor para que lo vuelva a calcular en funcion a una depencias

    // Esto se hace cada que se renderiza el componente debido a que esta en el cuerpo del componente
  // Este es un "calculo" que queremos memoisar este calculo queiro que la evites y quiero que la hagas cuando pase una accion

  const sortedMovies = useMemo(() => {
    return sort
      ? [...movies].sort((a, b) => a.title.localeCompare(b.title))
      : movies
  }, [sort, movies])

  Hay que pensar si vale la pena utilizarlo porque no podemos abusar de el

  useCallback - Es la misma onda que el useMemo solo que para funciones

  race conditions
  En programación informática, una condición de carrera (race condition en inglés) ocurre cuando dos o más procesos o hilos de ejecución acceden a un recurso compartido, como puede ser la memoria o un archivo, y el resultado final depende del orden en el que se ejecuten las operaciones. Esto puede generar comportamientos impredecibles e inesperados en el programa, y es una de las fuentes más comunes de errores en sistemas concurrentes o paralelos. Para evitar las condiciones de carrera, se utilizan técnicas de sincronización y exclusión mutua, como semáforos, mutexes o monitores, que permiten que los procesos accedan al recurso compartido de manera controlada y ordenada.

  En el ejercicio de movie search app cada que escribiamos haciamos llamadas a la API hay una condicion de carrera
  Hay Dos cosas en paralelo pero no sabemos cual a terminado antes - En este caso cual llamada a la API ha terminado antes
  Una de las primeras llamadas a la API pudo haber termiando mas tarde que las ultimas y muestra los resultados de la primera y no de la ultimas

  Como lo evitamos?

  BESTO WAY - crear un DEBOUNCE - Vamos hacer que el usuario mientras escribe no vamos a hacer nada y vamos a esperar que deje de escribir un tiempo por ejemplo 300ms para que la ultima llamada que haya echo el usuario vayamos a disparar
  


  





